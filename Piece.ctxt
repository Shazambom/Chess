#BlueJ class context
comment0.params=x\ y\ name\ team\ img\ id
comment0.target=Piece(int,\ int,\ java.lang.String,\ boolean,\ javax.swing.ImageIcon,\ int)
comment0.text=\n\ This\ method\ initalizes\ all\ the\ different\ kinds\ of\ pieces.\n\ @param\ x\ position\ on\ the\ board\n\ @param\ y\ position\ on\ the\ board\n\ @param\ name\ of\ the\ kind\ of\ piece\n\ @param\ team\ a\ boolean\ that\ is\ false\ if\ the\ piece\ is\ white\ and\ true\ if\ the\ piece\ is\ black\n\ @param\ img\ the\ image\ of\ the\ piece\ \n
comment1.params=
comment1.target=int\ getID()
comment1.text=\n\ Gets\ the\ id\ of\ the\ piece,\ an\ integer\ number\ that\ identifies\ what\ kind\ of\ piece\ it\ is.\n\ @return\ the\ int\ id\n
comment10.params=dx\ dy
comment10.target=boolean\ isInCheck(int,\ int)
comment10.text=\n\ This\ method\ should\ only\ be\ overwritten\ in\ the\ King\ class.\n\ Checks\ to\ see\ if\ the\ king\ is\ in\ check.\ \n\ @param\ dx\ the\ x\ coordinate\ on\ the\ board\n\ @param\ dy\ the\ y\ coordinate\ on\ the\ board\n\ @return\ a\ true\ value\ if\ the\ King\ is\ in\ check\ or\ a\ false\ value\ if\ the\ King\ is\ not\ in\ check\n
comment11.params=
comment11.target=boolean\ isInCheckmate()
comment11.text=\n\ This\ method\ should\ only\ be\ overwritten\ in\ the\ King\ class.\n\ Checks\ to\ see\ if\ a\ king\ is\ in\ checkmate.\n\ @return\ a\ true\ value\ if\ the\ King\ is\ in\ checkmate\ or\ a\ flase\ value\ if\ the\ King\ is\ not\ in\ checkmate.\n
comment12.params=dx\ dy\ opponent
comment12.target=boolean\ getValidMove(int,\ int,\ Piece)
comment12.text=\n\ Checks\ if\ the\ move\ chosen\ is\ valid.\n\ @param\ dx\ the\ x\ coordinate\ where\ the\ piece\ is\ moving\ to.\n\ @param\ dy\ the\ y\ coordinate\ where\ the\ piece\ is\ moving\ to.\n\ @param\ opponent\ the\ occupant\ of\ that\ space.\n\ @return\ a\ true\ value\ if\ the\ the\ move\ chosen\ is\ possible\ for\ the\ piece\ chosen\n
comment13.params=a\ b\ rook
comment13.target=boolean\ castle(int,\ int,\ Piece)
comment13.text=\n\ This\ method\ is\ only\ should\ be\ overwritten\ in\ the\ King\ class.\n\ This\ method\ checks\ if\ the\ King\ and\ respective\ Rook\ are\ capable\ of\ castling.\n\ @param\ a\ the\ x\ value\ where\ the\ king\ is\ moving.\n\ @param\ b\ the\ y\ value\ where\ the\ king\ is\ moving.\n\ @param\ rook\ that\ is\ going\ to\ be\ moved\ along\ with\ the\ king.\n\ @return\ a\ true\ value\ if\ it\ is\ possible\ to\ castle.\n
comment14.params=y
comment14.target=boolean\ ascend(int)
comment14.text=\n\ This\ method\ should\ only\ be\ overwritten\ in\ the\ Pawn\ class.\n\ This\ method\ ascends\ a\ Pawn\ to\ a\ queen.\ \n\ @param\ y\ coordinate\ on\ the\ board\n\ @return\ a\ true\ value\ if\ it\ is\ possible\ for\ a\ pawn\ to\ ascend\n
comment15.params=
comment15.target=void\ checkmateAssist()
comment15.text=\n\ This\ method\ should\ only\ be\ overwritten\ in\ the\ King\ class.\n\ This\ method\ assists\ with\ checking\ to\ see\ if\ a\ King\ is\ in\ check\ or\ checkmate.\n\ It\ checks\ to\ see\ if\ the\ King\ truely\ is\ in\ check\ or\ Checkmate.\n\ Also\ checks\ to\ see\ if\ the\ player\ who\ is\ in\ checkmate\ has\ any\ possible\ move\ to\ get\ out\n\ and\ if\ so\ determines\ that\ it\ is\ not\ checkmate.\n
comment16.params=a\ b\ opp
comment16.target=boolean\ enpassant(int,\ int,\ Piece)
comment16.text=\n\ This\ method\ should\ only\ be\ overwritten\ in\ the\ Pawn\ class.\n\ This\ method\ checks\ to\ see\ if\ a\ pawn\ can\ perform\ an\ enpassant.\n\ @param\ a\ the\ x\ value\ where\ the\ pawn\ is\ to\ move\ to.\n\ @param\ b\ the\ y\ value\ where\ the\ pawn\ is\ to\ move\ to.\n\ @param\ opp\ the\ Piece\ object\ to\ the\ right\ or\ left\ of\ the\ pawn.\n
comment2.params=
comment2.target=javax.swing.ImageIcon\ getImg()
comment2.text=\n\ Gets\ the\ image\ of\ the\ piece\n\ @return\ the\ ImageIcon\ object\n
comment3.params=
comment3.target=int\ getNumMoves()
comment3.text=\n\ Gets\ the\ number\ of\ moves\ the\ piece\ has\ taken\n\ @return\ the\ int\ value\ of\ numMoves\n
comment4.params=
comment4.target=void\ addMove()
comment4.text=\n\ Increments\ the\ number\ of\ moves\ the\ piece\ has\ taken\ by\ one.\ \n
comment5.params=
comment5.target=int\ getX()
comment5.text=\n\ Gets\ the\ X\ coordinate\ of\ the\ piece.\n\ @return\ the\ int\ value\ of\ the\ X\ coordinate\n
comment6.params=
comment6.target=int\ getY()
comment6.text=\n\ Gets\ the\ Y\ coordinate\ of\ the\ piece.\n\ @return\ the\ int\ value\ of\ the\ Y\ coordinate\ \n
comment7.params=
comment7.target=java.lang.String\ getName()
comment7.text=\n\ Gets\ the\ name\ of\ the\ piece.\n\ @return\ name\ of\ the\ piece\ which\ is\ related\ to\ what\ kind\ of\ piece\ it\ is\n
comment8.params=
comment8.target=boolean\ getTeam()
comment8.text=\n\ Gets\ the\ color\ of\ the\ piece.\n\ @return\ the\ team\ the\ piece\ is\ on\:\ False\ for\ White\ and\ True\ for\ Black.\n
comment9.params=a
comment9.target=void\ move(Location)
comment9.text=\n\ Moves\ the\ piece\ to\ a\ location.\n\ @param\ a\ A\ Location\ object\ which\ represents\ a\ location\ on\ the\ board\n
numComments=17
